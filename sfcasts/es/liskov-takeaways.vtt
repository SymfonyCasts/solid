WEBVTT

00:00:01.036 --> 00:00:04.256 align:middle
Para celebrar nuestro nuevo
sistema, vamos a verlo en acción.

00:00:04.776 --> 00:00:07.676 align:middle
En BigFootSightingController,
después de addFlash(),

00:00:07.986 --> 00:00:10.456 align:middle
añadamos también información
sobre la duración.

00:00:11.076 --> 00:00:16.196 align:middle
Pero como no sabemos con certeza si estamos utilizando
la versión "depurable" del servicio, añade

00:00:16.606 --> 00:00:22.116 align:middle
si $bfsScore es una instancia de
DebuggableBigFootSightingScore,

00:00:22.286 --> 00:00:27.696 align:middle
entonces $this->addFlash('success',
sprintf(...)) con: Por cierto,

00:00:28.016 --> 00:00:35.346 align:middle
la puntuación ha tardado %f milisegundos Pasando
$bfsScore->getCalculationTime() por 1000

00:00:35.386 --> 00:00:38.156 align:middle
para convertir de microsegundos a milisegundos.

00:00:39.016 --> 00:00:40.286 align:middle
¡Genial! Pero...

00:00:40.546 --> 00:00:47.966 align:middle
espera: ¿no he dicho que instanceof es una señal de
que podemos estar rompiendo el principio de Liskov?

00:00:48.636 --> 00:00:53.456 align:middle
Sí, pero no me preocupa
demasiado, por varias razones.

00:00:54.176 --> 00:00:56.006 align:middle
En primer lugar, este es mi controlador...

00:00:56.406 --> 00:01:00.296 align:middle
cuyo trabajo consiste en unir todas
las piezas feas de mi aplicación.

00:01:01.276 --> 00:01:06.826 align:middle
Y en segundo lugar, estoy utilizando el instanceof
para detectar si puedo añadir funcionalidad...

00:01:07.146 --> 00:01:10.876 align:middle
no para solucionar una
subclase que se comporta mal.

00:01:11.846 --> 00:01:18.396 align:middle
Sin embargo, otra solución, dependiendo de si
realmente necesitas sustituir esta clase sólo

00:01:18.396 --> 00:01:21.626 align:middle
en un entorno, es decir explícitamente

00:01:21.626 --> 00:01:25.096 align:middle
que necesitas la versión
depurable del servicio.

00:01:25.856 --> 00:01:30.106 align:middle
Así, en lugar de decir "permito cualquier
SightingScorer", podríamos decir

00:01:30.486 --> 00:01:34.056 align:middle
"necesito específicamente
un DebuggableSightingScorer".

00:01:34.886 --> 00:01:39.456 align:middle
Si hiciéramos eso, no necesitaríamos
el instanceof porque sabríamos

00:01:39.616 --> 00:01:43.986 align:middle
que ese servicio devuelve un
DebuggableBigFootSightingScore,

00:01:44.446 --> 00:01:47.366 align:middle
que tiene el método getCalculationTime().

00:01:48.096 --> 00:01:51.956 align:middle
Pero... nos falta un pequeño
detalle de configuración en Symfony.

00:01:52.316 --> 00:01:53.836 align:middle
Intenta actualizar la página.

00:01:55.016 --> 00:01:55.776 align:middle
¡Se rompe!

00:01:56.476 --> 00:01:59.276 align:middle
No se puede autoconectar el
servicio DebuggableSightingScorer:

00:01:59.756 --> 00:02:02.576 align:middle
el argumento $scoringFactors
es de tipo iterable.

00:02:02.846 --> 00:02:05.476 align:middle
Debes configurar su valor explícitamente.

00:02:06.346 --> 00:02:10.526 align:middle
Espera... nos encontramos con este error cuando
trabajamos con el principio de abierto-cerrado.

00:02:10.986 --> 00:02:14.826 align:middle
Y, en config/services.yaml, lo arreglamos

00:02:14.986 --> 00:02:18.646 align:middle
cableando específicamente
el argumento $scoringFactors.

00:02:19.376 --> 00:02:21.356 align:middle
¿Por qué ya no funciona? Gracias al

00:02:22.116 --> 00:02:28.346 align:middle
auto-registro -la característica que registra
automáticamente todas las clases en src/

00:02:28.346 --> 00:02:34.426 align:middle
como un servicio- hay un servicio separado en
nuestro contenedor llamado DebuggableSightingScorer.

00:02:35.216 --> 00:02:40.856 align:middle
Puedes verlo si ejecutas php bin/console
debug:container Sighting ¡Si!

00:02:41.176 --> 00:02:46.726 align:middle
Hay un servicio DebuggableSightingScorer y
un servicio separado para SightingScorer.

00:02:47.606 --> 00:02:48.376 align:middle
Esto no es...

00:02:48.376 --> 00:02:49.836 align:middle
no lo que queremos.

00:02:50.376 --> 00:02:54.616 align:middle
En realidad, quiero que Symfony
nos pase el mismo servicio,

00:02:54.906 --> 00:02:59.926 align:middle
independientemente de si escribimos
DebuggableSightingScorer o SightingScorer.

00:03:00.636 --> 00:03:02.916 align:middle
Podemos hacerlo añadiendo un alias.

00:03:03.406 --> 00:03:10.076 align:middle
Dentro de services.yaml, digamos
App\Service\DebuggableSightingScorer, dos puntos,

00:03:10.366 --> 00:03:15.016 align:middle
un símbolo @ y luego
App\Service\SightingScorer.

00:03:16.076 --> 00:03:22.656 align:middle
Esto dice: siempre que alguien intente autoconectar
o utilizar el servicio DebuggableSightingScorer,

00:03:23.116 --> 00:03:26.846 align:middle
en realidad debes pasarle el
servicio SightingScorer...

00:03:27.446 --> 00:03:32.646 align:middle
que, en realidad, es una instancia
de la clase DebuggableSightingScorer.

00:03:33.046 --> 00:03:34.756 align:middle
Puede ser un poco confuso.

00:03:35.616 --> 00:03:43.226 align:middle
De vuelta a tu terminal, ejecuta de nuevo
debug:container: Parece que sigue habiendo 2 servicios,

00:03:43.646 --> 00:03:48.596 align:middle
pero si le das a "6" para ver el
"Depurable", en la parte superior, dice:

00:03:49.136 --> 00:03:53.356 align:middle
Este es un alias del servicio
App\Service\SightingScorer.

00:03:54.096 --> 00:03:56.866 align:middle
Y en el navegador, cuando refrescamos...

00:03:57.256 --> 00:03:58.216 align:middle
¡vuelve a funcionar!

00:03:59.176 --> 00:04:05.806 align:middle
Así que la gran conclusión del principio de Liskov es la
siguiente: asegúrate de que cuando tengas un "subtipo "

00:04:06.206 --> 00:04:10.626 align:middle
-una clase que extienda a otra
o que implemente una interfaz-

00:04:11.086 --> 00:04:13.726 align:middle
siga las reglas de ese tipo padre.

00:04:14.346 --> 00:04:16.646 align:middle
No hace nada sorprendente.

00:04:17.386 --> 00:04:18.316 align:middle
Eso es todo.

00:04:19.026 --> 00:04:23.286 align:middle
Y PHP incluso nos evita la mayoría
de las violaciones de Liskov.

00:04:24.216 --> 00:04:27.796 align:middle
La parte más interesante de
Liskov para mí es conocer

00:04:27.796 --> 00:04:30.486 align:middle
las cosas que se nos permiten hacer. Por

00:04:31.046 --> 00:04:34.856 align:middle
ejemplo, está permitido cambiar el
tipo de retorno de un método siempre

00:04:35.126 --> 00:04:37.816 align:middle
que lo hagas más específico.

00:04:38.446 --> 00:04:42.116 align:middle
O lo contrario para los tipos de
argumento: puedes cambiarlos...

00:04:42.336 --> 00:04:44.966 align:middle
siempre que los hagas menos específicos.

00:04:45.986 --> 00:04:52.676 align:middle
Bien, el siguiente es el principio sólido número
4: el principio de segregación de la interfaz
