WEBVTT

00:00:01.016 --> 00:00:05.686 align:middle
Calcular el tiempo que tarda en ejecutarse
el método padre score() será fácil.

00:00:06.386 --> 00:00:06.806 align:middle
Pero entonces...

00:00:07.086 --> 00:00:09.366 align:middle
¿qué hacemos con ese número?

00:00:10.076 --> 00:00:13.536 align:middle
Este método devuelve una instancia
de BigFootSightingScore....

00:00:14.056 --> 00:00:18.316 align:middle
por lo que no podemos cambiarlo de repente
para que devuelva un int por la duración.

00:00:19.016 --> 00:00:23.976 align:middle
¿Cómo puede este método devolver tanto el BigFootSightingScore
como la información sobre el tiempo que ha tardado

00:00:23.976 --> 00:00:27.466 align:middle
en calcular la puntuación?

00:00:28.286 --> 00:00:31.276 align:middle
La respuesta es: ¡crea otra subclase!

00:00:31.826 --> 00:00:36.846 align:middle
Una subclase de BigFootSightingScore
que contenga la información extra.

00:00:37.776 --> 00:00:42.126 align:middle
BigFootSightingScore vive en el
directorio src/Model/: ahí está.

00:00:42.816 --> 00:00:48.826 align:middle
Justo al lado, añade una nueva clase llamada,
qué tal, DebuggableBigFootSightingScore.

00:00:51.436 --> 00:00:53.956 align:middle
Haz que extienda la normal
BigFootSightingScore.

00:00:54.876 --> 00:00:57.156 align:middle
¡Ahora tenemos dos
subclases con las que jugar!

00:00:58.006 --> 00:01:00.026 align:middle
Esta vez, anula el constructor:

00:01:00.646 --> 00:01:03.956 align:middle
hazlo yendo a Código ->
Generar - o Comando + N en un Mac.

00:01:04.326 --> 00:01:05.586 align:middle
Anula __construct().

00:01:06.676 --> 00:01:10.436 align:middle
Esto llama al constructor padre con
la puntuación, ¡lo cual es genial!

00:01:11.116 --> 00:01:14.046 align:middle
Añade un nuevo argumento:
float $calculationTime.

00:01:14.046 --> 00:01:18.136 align:middle
Pulso Alt + Enter y voy a
"Inicializar propiedades"...

00:01:18.476 --> 00:01:20.476 align:middle
selecciona sólo $calculationTime...

00:01:21.076 --> 00:01:23.046 align:middle
para crear esa propiedad y establecerla. ¡

00:01:24.006 --> 00:01:28.796 align:middle
Para que el $calculationTime sea accesible, en
la parte inferior, vuelve a Código -> Generar

00:01:28.896 --> 00:01:30.836 align:middle
y haz un método "getter"
para esto! Por cierto,

00:01:31.716 --> 00:01:36.716 align:middle
añadir un argumento necesario a un
método que estás sobrescribiendo

00:01:37.096 --> 00:01:43.556 align:middle
-como estamos haciendo en __construct - es normalmente
otra forma de violar el principio de Liskov.

00:01:44.426 --> 00:01:48.016 align:middle
Pensemos en ello con un ejemplo
diferente: SightingScorer.

00:01:48.686 --> 00:01:54.156 align:middle
Cuando lo utilizamos, normalmente podemos
llamar a score() y pasarle un único argumento.

00:01:55.106 --> 00:02:02.036 align:middle
Si de repente lo sustituimos por una clase diferente
cuyo método score() requiriera dos argumen tos...

00:02:02.546 --> 00:02:05.516 align:middle
bueno, eso haría explotar nuestro código.

00:02:06.376 --> 00:02:10.616 align:middle
Esa nueva clase no sería
sustituible por la antigua.

00:02:11.376 --> 00:02:16.746 align:middle
Sin embargo, el constructor no necesita
seguir el principio de Liskov...

00:02:17.116 --> 00:02:19.996 align:middle
lo que me costó un minuto entender.

00:02:20.746 --> 00:02:26.226 align:middle
¿Por qué no? Porque si estás instanciando
un DebuggableBigFootSightingScore

00:02:26.446 --> 00:02:31.176 align:middle
-con new DebuggableBigFootSightingScore
- entonces sabes exactamente

00:02:31.176 --> 00:02:33.456 align:middle
qué clase estás instanciando.

00:02:34.216 --> 00:02:38.476 align:middle
Y, por tanto, puedes saber exactamente
qué argumentos tienes que pasar.

00:02:39.346 --> 00:02:44.286 align:middle
Esto es diferente a que te pasen
un objeto BigFootSightingScore...

00:02:44.776 --> 00:02:48.476 align:middle
en el que la verdadera clase
puede ser una subclase.

00:02:49.296 --> 00:02:55.586 align:middle
En esa situación, necesitas que los
métodos que llames a ese objeto se comporten

00:02:55.586 --> 00:02:58.646 align:middle
como los de la clase original.

00:02:59.376 --> 00:03:04.486 align:middle
Como el constructor nunca se llama a
un objeto, eso no es un problema. De

00:03:05.306 --> 00:03:08.276 align:middle
todos modos, volviendo a
DebuggableSightingScorer , vamos a

00:03:08.636 --> 00:03:12.846 align:middle
devolver nuestra nueva clase
DebuggableBigFootSightingScore

00:03:13.126 --> 00:03:14.586 align:middle
con una duración ficticia.

00:03:15.246 --> 00:03:18.616 align:middle
Digamos $bfScore = parent::score()...

00:03:19.186 --> 00:03:25.356 align:middle
y luego devolvamos un new DebuggableBigFootSightingScore
pasando la puntuación de int

00:03:25.356 --> 00:03:30.986 align:middle
- $bfScore->getScore() - y
100 por una duración falsa.

00:03:31.846 --> 00:03:38.466 align:middle
Anunciemos también que devolvemos esta nueva
clase: DebuggableBigFootSightingScore Pero espera

00:03:38.956 --> 00:03:42.716 align:middle
¡acabamos de cambiar el tipo de retorno
a algo diferente de nuestra clase padre!

00:03:43.176 --> 00:03:43.986 align:middle
¿Está permitido?

00:03:44.746 --> 00:03:46.796 align:middle
Busca tu navegador, actualiza y...

00:03:46.796 --> 00:03:50.056 align:middle
¡PHP lo permite totalmente!

00:03:50.586 --> 00:03:53.826 align:middle
Porque esto sí sigue el principio de Liskov:

00:03:54.316 --> 00:03:57.446 align:middle
estamos haciendo el tipo
de retorno más estrecho...

00:03:57.646 --> 00:03:58.766 align:middle
o más específico.

00:03:58.766 --> 00:04:03.156 align:middle
¿Pero por qué se permite hacer
más estrecho un tipo de retorno?

00:04:03.916 --> 00:04:08.726 align:middle
Mira BigFootSightingController: la
clase que utiliza el SightingScorer.

00:04:09.546 --> 00:04:12.536 align:middle
Este código requiere una
instancia de SightingScorer.

00:04:12.946 --> 00:04:16.026 align:middle
Y así, cuando llamemos más
tarde al método score(),

00:04:16.376 --> 00:04:20.616 align:middle
sabemos que devolverá un
objeto BigFootSightingScore.

00:04:21.306 --> 00:04:26.206 align:middle
Lo sabemos porque, si saltamos a
la clase SightingScorer, ¡sí!

00:04:26.716 --> 00:04:29.756 align:middle
El método score() devuelve
un BigFootSightingScore.

00:04:30.446 --> 00:04:36.436 align:middle
Y así, sabemos que la variable $bfsScore
es una instancia de BigFootSightingScore...

00:04:37.016 --> 00:04:41.496 align:middle
y sabemos que esa clase
tiene un método getScore().

00:04:42.436 --> 00:04:44.656 align:middle
Una vez más, saltaré a la clase.

00:04:45.216 --> 00:04:50.566 align:middle
Este es el original BigFootSightingScore
y aquí está su método getScore().

00:04:51.416 --> 00:04:55.086 align:middle
Lo utilizamos en nuestro controlador
para obtener la puntuación entera y...

00:04:55.266 --> 00:04:56.916 align:middle
¡todo es feliz!

00:04:57.676 --> 00:05:04.916 align:middle
Pero ahora sabemos que hemos sustituido el
SightingScorer por un DebuggableSightingScorer...

00:05:05.386 --> 00:05:11.046 align:middle
y sabemos que su método score() devuelve
un DebuggableBigFootSightingScore.

00:05:12.046 --> 00:05:13.926 align:middle
¡Pero no pasa nada!

00:05:14.606 --> 00:05:20.156 align:middle
¿Por qué? Porque DebuggableBigFootSightingScore
extiende a BigFootSightingScore.

00:05:20.616 --> 00:05:25.916 align:middle
Así que seguimos devolviendo una
instancia de BigFootSightingScore, que, por

00:05:26.076 --> 00:05:29.206 align:middle
supuesto, sigue teniendo un método getScore().

00:05:30.016 --> 00:05:32.666 align:middle
El hecho de que devolvamos una subclase...

00:05:32.916 --> 00:05:39.066 align:middle
que potencialmente tiene métodos
adicionales, no rompe su sustituibilidad.

00:05:39.876 --> 00:05:45.636 align:middle
Pero si hubiéramos cambiado su tipo de retorno
a algo menos específico, como cualquier objeto,

00:05:46.106 --> 00:05:52.456 align:middle
entonces no habría garantía de que lo que devolvemos
de este método tiene un método getScore().

00:05:53.056 --> 00:05:56.446 align:middle
Y por tanto, eso rompería
el principio de Liskov.

00:05:57.156 --> 00:06:01.396 align:middle
PHP se enfadaría tanto con nosotros
que generaría un error de sintaxis.

00:06:01.946 --> 00:06:02.836 align:middle
Vamos a deshacer eso.

00:06:03.766 --> 00:06:07.816 align:middle
No hablaremos de ello en detalle, pero
la misma filosofía puede aplicarse

00:06:07.816 --> 00:06:11.546 align:middle
a los tipos de argumentos,
pero en sentido contrario.

00:06:12.206 --> 00:06:18.416 align:middle
Está bien cambiar un tipo de argumento
siempre que admita al menos el tipo original.

00:06:19.236 --> 00:06:23.006 align:middle
No está bien ser más restrictivo
con el tipo que permites,

00:06:23.376 --> 00:06:28.476 align:middle
pero sí está bien ser menos
específico: se me permite decir

00:06:28.506 --> 00:06:31.346 align:middle
que el método score() admite cualquier objeto.

00:06:32.116 --> 00:06:35.686 align:middle
Pues bien, en este ejemplo,
eso sería problemático

00:06:35.986 --> 00:06:39.046 align:middle
porque estamos pasando el
argumento a la clase padre...

00:06:39.476 --> 00:06:42.416 align:middle
que sigue requiriendo un BigFootSighting...

00:06:43.176 --> 00:06:51.076 align:middle
pero en general, permitir un tipo de argumento menos
específico, o más amplio, está permitido por Liskov.

00:06:52.126 --> 00:06:56.646 align:middle
Y puedes ver esto si refrescamos:
no hay error de sintaxis de PHP.

00:06:57.466 --> 00:06:58.616 align:middle
Volvamos a cambiarlo.

00:06:59.616 --> 00:07:05.096 align:middle
A continuación: es hora de celebrar nuestro nuevo
sistema utilizando el nuevo valor de la duración,

00:07:05.416 --> 00:07:11.316 align:middle
ajustando algunas cosas en la configuración de Symfony
y enumerando las conclusiones del principio de Liskov
